"""
Django settings for macci project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import logging
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
import constants

BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 't=nf=ww2p%$3f!7qccz+uyva$)s!!1ebx5os070g1ry&pqz3d1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = constants.DEBUG

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    # 'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'macci.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'macci.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': constants.MASTER_DATABASE_ENGINE,
        'NAME': constants.MASTER_DATABASE_NAME,
        'USER': constants.MASTER_DATABASE_USER,
        'PASSWORD': constants.MASTER_DATABASE_PASSWORD,
        'HOST': constants.MASTER_DATABASE_HOST,
        'PORT': constants.MASTER_DATABASE_PORT,
        'CONN_MAX_AGE': constants.MASTER_DATABASE_CONN_MAX_AGE,
        'TEST': {
            'CHARSET': 'utf8',
            'COLLATION': 'utf8_general_ci',
        },
        'CHARSET': 'utf8',
        "OPTIONS": {"init_command": "SET default_storage_engine=INNODB"}
    },
    'log': {
        'NAME': constants.LOG_DB_NAME,
        'ENGINE': constants.MASTER_DATABASE_ENGINE,
        'USER': constants.MASTER_DATABASE_USER,
        'PASSWORD': constants.MASTER_DATABASE_PASSWORD,
        'HOST': constants.MASTER_DATABASE_HOST,
        'PORT': constants.MASTER_DATABASE_PORT,
        'CONN_MAX_AGE': constants.MASTER_DATABASE_CONN_MAX_AGE,
        'TEST': {
            'CHARSET': 'utf8',
            'COLLATION': 'utf8_general_ci',
        },
        'CHARSET': 'utf8'
    },
    'read': {
        'ENGINE': constants.MASTER_DATABASE_ENGINE,
        'NAME': constants.MASTER_DATABASE_NAME,
        'USER': constants.MASTER_DATABASE_USER,
        'PASSWORD': constants.MASTER_DATABASE_PASSWORD,
        'HOST': constants.MASTER_DATABASE_HOST_READ,
        'PORT': constants.MASTER_DATABASE_PORT,
        'CONN_MAX_AGE': constants.MASTER_DATABASE_CONN_MAX_AGE,
        'TEST': {
            'CHARSET': 'utf8',
            'COLLATION': 'utf8_general_ci',
        },
        'CHARSET': 'utf8'
    },
    'special_read': {
        'ENGINE': constants.MASTER_DATABASE_ENGINE,
        'NAME': constants.MASTER_DATABASE_NAME,
        'USER': constants.MASTER_DATABASE_USER,
        'PASSWORD': constants.MASTER_DATABASE_PASSWORD,
        'HOST': constants.MASTER_DATABASE_HOST_READ_SPECIAL,
        'PORT': constants.MASTER_DATABASE_PORT,
        'CONN_MAX_AGE': constants.MASTER_DATABASE_CONN_MAX_AGE,
        'TEST': {
            'CHARSET': 'utf8',
            'COLLATION': 'utf8_general_ci',
        },
        'CHARSET': 'utf8'
    },
    'write': {
        'ENGINE': constants.MASTER_DATABASE_ENGINE,
        'NAME': constants.MASTER_DATABASE_NAME,
        'USER': constants.MASTER_DATABASE_USER,
        'PASSWORD': constants.MASTER_DATABASE_PASSWORD,
        'HOST': constants.MASTER_DATABASE_HOST_WRITE,
        'PORT': constants.MASTER_DATABASE_PORT,
        'CONN_MAX_AGE': constants.MASTER_DATABASE_CONN_MAX_AGE,
        'TEST': {
            'CHARSET': 'utf8',
            'COLLATION': 'utf8_general_ci',
        },
        'CHARSET': 'utf8'
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 日志系统

LOG_DIR = constants.LOG_DIR
# 本地开发环境使用
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)
LOG_FILE_PATH = os.path.join(LOG_DIR, 'macci.log')
LOG_BACKUP_COUNT = 1
LOG_MAX_BYTES = 1024 * 1024 * 1024 * 1024
if not os.path.exists(LOG_FILE_PATH):  # 不存在则创建
    with open(LOG_FILE_PATH, 'w+') as f:
        f.close()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [pid:%(process)d] [%(levelname)s] %(message)s'
        },
        'precise': {
            'format': '[pid:%(process)d]  %(levelname)s \x1b[6;30;42m%(asctime)s\x1b[0m %(name)s \x1b[1;32;40m%(message)s\x1b[0m\n'
        },
    },
    'handlers': {
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'include_html': True,
        # },
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE_PATH,  # 日志输出文件
            'maxBytes': LOG_MAX_BYTES,  # 备份大小
            'backupCount': LOG_BACKUP_COUNT,  # 备份份数
            'formatter': 'standard',  # 使用哪种formatters日志格式
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE_PATH,
            'maxBytes': LOG_MAX_BYTES,
            'backupCount': LOG_BACKUP_COUNT,
            'formatter': 'standard',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'precise'
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE_PATH,
            'maxBytes': LOG_MAX_BYTES,
            'backupCount': LOG_BACKUP_COUNT,
            'formatter': 'standard',
        },
        'scprits_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE_PATH,
            'maxBytes': LOG_MAX_BYTES,
            'backupCount': LOG_BACKUP_COUNT,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'] if constants.DEBUG else ['default'],
            'level': 'INFO',
            'propagate': False
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'INFO',
            'propagate': False,
        },
        'scripts': {
            'handlers': ['scprits_handler'],
            'level': 'INFO',
            'propagate': False
        },
        'django.error': {
            'handlers': ['default', 'error'],
            'level': 'ERROR',
            'propagate': True
        }
    }
}

logger = logging.getLogger('django')


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
